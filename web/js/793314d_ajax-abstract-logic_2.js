// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = window.App || {};

  App.AbstractErrorizer = (function() {

    function AbstractErrorizer() {}

    AbstractErrorizer.prototype.errorize = function($element, formErrors) {};

    AbstractErrorizer.prototype.clear = function($element) {};

    return AbstractErrorizer;

  })();

  App.FatalErrorizer = {};

  App.FatalErrorizer.Default = (function(_super) {

    __extends(Default, _super);

    function Default(errorizeClass, offsetLeft, offsetTop) {
      var _this = this;
      this.errorizeClass = errorizeClass != null ? errorizeClass : 'errorized-element';
      this.offsetLeft = offsetLeft != null ? offsetLeft : 0;
      this.offsetTop = offsetTop != null ? offsetTop : 0;
      this.clear = function() {
        return Default.prototype.clear.apply(_this, arguments);
      };
    }

    Default.prototype.errorize = function($element, response) {
      if (response && response.error) {
        return this.handleErrorResponse($element, response);
      } else if (typeof response === 'string' && response.search(/Fatal error:/i) !== -1) {
        return this.handleFatalErrorResponse($element, response);
      } else {
        return this.handleUnknownErrorResponse($element, response);
      }
    };

    Default.prototype.handleErrorResponse = function($element, response) {
      var message;
      message = response.error.xhr.status + " " + response.error.xhr.statusText + " " + this.getBasicMessage();
      return this.renderError($element, message);
    };

    Default.prototype.handleFatalErrorResponse = function($element, response) {
      var message;
      message = "An unrecoverable error occurred. " + this.getBasicMessage();
      return this.renderError($element, message);
    };

    Default.prototype.handleUnknownErrorResponse = function($element, response) {
      return this.handleFatalErrorResponse($element, response);
    };

    Default.prototype.getBasicMessage = function() {
      return "<br/> Please refresh your browser and try again. <br />         If the problem persists please inform us about it by contacting our technical support.         ";
    };

    Default.prototype.renderError = function($element, message) {
      var offset;
      offset = $element.offset();
      $('body').append('<div class="' + this.errorizeClass + ' fatal-error" style="top:' + (offset.top + this.offsetTop) + 'px; left:50%; ">' + message + '</div>');
      $('.fatal-error').css('margin-left', '-' + $('.fatal-error').width() / 2 + 'px');
      return $('body').append('<div class="ui-widget-overlay fatal-error-modal" style="width:' + $(document).width() + 'px; height:' + $(document).height() + 'px; "></div>');
    };

    Default.prototype.clear = function() {
      var _this = this;
      return $("." + this.errorizeClass).hide('slow', function() {
        $("." + _this.errorizeClass).remove();
        return $('fatal-error-modal').remove();
      });
    };

    return Default;

  })(App.AbstractErrorizer);

  App.AjaxAbstractLogic = (function() {

    AjaxAbstractLogic.prototype.currentElement = null;

    function AjaxAbstractLogic(selector, loader, errorizers) {
      var _this = this;
      this.selector = selector;
      this.loader = loader;
      this.errorizers = errorizers;
      this.clearErrors = function($element) {
        return AjaxAbstractLogic.prototype.clearErrors.apply(_this, arguments);
      };
      this.displayErrors = function($element, response) {
        return AjaxAbstractLogic.prototype.displayErrors.apply(_this, arguments);
      };
      this.validateAndParseJsonResponse = function(response) {
        return AjaxAbstractLogic.prototype.validateAndParseJsonResponse.apply(_this, arguments);
      };
      this.getConfiguration = function(that) {
        return AjaxAbstractLogic.prototype.getConfiguration.apply(_this, arguments);
      };
      if (!errorizers || !errorizers.length) {
        this.errorizers = [new App.FatalErrorizer.Default];
      } else {
        this.errorizers.push(new App.FatalErrorizer.Default);
      }
      if (!loader) {
        this.loader = new App.AjaxLoader.Default();
      }
    }

    AjaxAbstractLogic.prototype.getConfiguration = function(that) {
      var _this = this;
      if (!that) {
        that = this;
      }
      return {
        success: function(response, statusText, xhr, element) {
          _this.element = element;
          that.element = _this.element;
          that.preHandleResponse(_this.element);
          response = that.validateAndParseJsonResponse(response);
          if (response && response.success) {
            that.handleSuccess(response.success);
            return true;
          } else if (response) {
            that.handleFailure(response, _this.element);
          }
          return false;
        },
        error: function(xhr, ajaxOptions, thrownError) {
          that.preHandleResponse(that.currentElement);
          return that.handleFailure({
            'error': {
              'xhr': xhr,
              'ajaxOptions': ajaxOptions,
              'thrownError': thrownError
            }
          }, that.currentElement);
        },
        beforeSubmit: function(data, $element, options) {
          that.currentElement = $element;
          return that.preSubmit($element);
        }
      };
    };

    AjaxAbstractLogic.prototype.validateAndParseJsonResponse = function(response) {
      var parsedResponse;
      if (!response) {
        this.handleFailure(response, this.element);
      } else if (!response.success && !response.failure) {
        try {
          parsedResponse = $.parseJSON($(response).text());
        } catch (error) {
          this.handleFailure(response, this.element);
        }
        if (!parsedResponse) {
          this.handleFailure(response, this.element);
        } else if (!parsedResponse.success && !parsedResponse.failure) {
          this.handleFailure(parsedResponse, this.element);
        }
        return parsedResponse;
      }
      return response;
    };

    AjaxAbstractLogic.prototype.handleSuccess = function(success) {
      if (success.redirect) {
        window.location.href = success.redirect;
      } else if (success.reload) {
        window.location.reload();
      }
      if (success.content) {
        if (!success.callback) {
          throw "you don't have callback defined in your response";
        }
        try {
          return this[success.callback](success.content);
        } catch (e) {
          if (e instanceof TypeError) {
            throw "you don't have callback method defined!\n" + e;
          } else {
            throw e;
          }
        }
      }
    };

    AjaxAbstractLogic.prototype.handleFailure = function(failure, $element) {
      this.displayErrors($element, failure);
      return false;
    };

    AjaxAbstractLogic.prototype.displayErrors = function($element, response) {
      var errorizer, _i, _len, _ref;
      _ref = this.errorizers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        errorizer = _ref[_i];
        if (errorizer.errorize($element, response)) {
          return true;
        }
      }
    };

    AjaxAbstractLogic.prototype.clearErrors = function($element) {
      var errorizer, _i, _len, _ref, _results;
      _ref = this.errorizers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        errorizer = _ref[_i];
        _results.push(errorizer.clear($element));
      }
      return _results;
    };

    AjaxAbstractLogic.prototype.preSubmit = function($element) {
      return this.loader.start();
    };

    AjaxAbstractLogic.prototype.preHandleResponse = function($element) {
      return this.loader.stop();
    };

    return AjaxAbstractLogic;

  })();

}).call(this);
