// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.AjaxElement = {};

  App.AjaxElement.Abstract = (function(_super) {

    __extends(Abstract, _super);

    function Abstract(selector, loader, errorizers) {
      var _this = this;
      this.selector = selector;
      this.loader = loader;
      this.errorizers = errorizers;
      this.bind = function(options) {
        return Abstract.prototype.bind.apply(_this, arguments);
      };
      this.getConfiguration = function() {
        return Abstract.prototype.getConfiguration.apply(_this, arguments);
      };
      Abstract.__super__.constructor.call(this, this.selector, this.loader, this.errorizers);
      if (!errorizers) {
        this.errorizers = [new App.ElementErrorizer.Default()].concat(this.errorizers);
      }
      this.currentConfig = this.getConfiguration();
      this.bind(this.currentConfig);
    }

    Abstract.prototype.getConfiguration = function() {
      var options;
      options = {
        type: "post",
        dataType: "html",
        async: true,
        cache: false,
        event: "click"
      };
      return $.extend(Abstract.__super__.getConfiguration.call(this, this), options);
    };

    Abstract.prototype.bind = function(options) {
      var self;
      self = this;
      return $('body').on(options.event, this.selector, function() {
        var _this = this;
        $.ajax({
          url: $(this).attr('href'),
          type: options.type,
          async: options.async,
          cache: options.cache,
          dataType: options.dataType,
          success: function(data, textStatus, jqXHR) {
            try {
              return options.success($.parseJSON(data), textStatus, jqXHR, $(_this));
            } catch (error) {
              return self.handleFailure(data, $(_this));
            }
          },
          beforeSend: function(jqXHR, settings) {
            return options.beforeSubmit(jqXHR, $(_this), settings);
          },
          error: options.error
        });
        return false;
      });
    };

    Abstract.prototype.preSubmit = function($element) {
      if (this.loader.isRunning()) {
        return false;
      }
      return this.loader.start();
    };

    return Abstract;

  })(App.AjaxAbstractLogic);

  App.AjaxElement.Default = (function(_super) {

    __extends(Default, _super);

    function Default() {
      return Default.__super__.constructor.apply(this, arguments);
    }

    return Default;

  })(App.AjaxElement.Abstract);

  App.ElementErrorizer = {};

  App.ElementErrorizer.Default = (function(_super) {

    __extends(Default, _super);

    function Default(errorizeClass, offsetLeft, offsetTop) {
      var _this = this;
      this.errorizeClass = errorizeClass != null ? errorizeClass : 'errorized-element';
      this.offsetLeft = offsetLeft != null ? offsetLeft : 0;
      this.offsetTop = offsetTop != null ? offsetTop : 0;
      this.clear = function() {
        return Default.prototype.clear.apply(_this, arguments);
      };
    }

    Default.prototype.errorize = function($link, response) {
      var offset,
        _this = this;
      if (response.failure) {
        offset = $link.offset();
        $('body').append('<div class="' + this.errorizeClass + '" style="top:' + (offset.top + this.offsetTop) + 'px; left:' + (offset.left + this.offsetLeft) + 'px;">' + response.failure + '</div>');
        $("." + this.errorizeClass).delay(2000).hide('slow', function() {
          return $("." + _this.errorizeClass).remove();
        });
        return true;
      } else {
        return false;
      }
    };

    Default.prototype.clear = function() {
      var _this = this;
      return $("." + this.errorizeClass).hide('slow', function() {
        return $("." + _this.errorizeClass).remove();
      });
    };

    return Default;

  })(App.AbstractErrorizer);

}).call(this);
