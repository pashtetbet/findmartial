// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.AjaxForm = {};

  App.AjaxForm.Abstract = (function(_super) {

    __extends(Abstract, _super);

    function Abstract(selector, loader, errorizers) {
      var _this = this;
      this.selector = selector;
      this.loader = loader;
      this.errorizers = errorizers;
      this.getConfiguration = function() {
        return Abstract.prototype.getConfiguration.apply(_this, arguments);
      };
      Abstract.__super__.constructor.call(this, this.selector, this.loader, this.errorizers);
      if (!errorizers) {
        this.errorizers = [new App.FormErrorizer.Default()].concat(this.errorizers);
      }
      $(selector).ajaxForm(this.getConfiguration());
      this.bindSubmitClickHandler();
    }

    Abstract.prototype.getConfiguration = function() {
      var config;
      config = Abstract.__super__.getConfiguration.call(this, this);
      config.delegation = true;
      return config;
    };

    Abstract.prototype.preSubmit = function($form) {
      this.disableSubmits($form);
      return this.loader.start();
    };

    Abstract.prototype.submitButtonClick = function($form, $button) {};

    Abstract.prototype.preHandleResponse = function($form) {
      this.loader.stop();
      this.clearErrors($form);
      return this.enableSubmits($form);
    };

    Abstract.prototype.enableSubmits = function($form) {
      return this.findFormSubmits($form).removeAttr('disabled');
    };

    Abstract.prototype.disableSubmits = function($form) {
      return this.findFormSubmits($form).attr('disabled', 'disabled');
    };

    Abstract.prototype.findFormSubmits = function($form) {
      return $form.find('input[type="image"],input[type="submit"],button');
    };

    Abstract.prototype.bindSubmitClickHandler = function() {
      var self, submitButtons;
      submitButtons = $(this.selector).find('input[type="image"],input[type="submit"],button');
      self = this;
      return $(submitButtons).click(function(event) {
        var $form;
        $form = $(this).closest('form');
        return self.submitButtonClick($form, $(this));
      });
    };

    return Abstract;

  })(App.AjaxAbstractLogic);

  App.AjaxForm.Default = (function(_super) {

    __extends(Default, _super);

    function Default() {
      return Default.__super__.constructor.apply(this, arguments);
    }

    Default.prototype.submitButtonClick = function($form, $button) {
      Default.__super__.submitButtonClick.call(this, $form, $button);
      return this.updateFormAction($form, $button);
    };

    Default.prototype.updateFormAction = function($form, $button) {
      if ($button && $button.data('action')) {
        this.storeFormAction($form);
        return $form.attr('action', $button.data('action'));
      } else {
        return this.restoreFormAction($form);
      }
    };

    Default.prototype.storeFormAction = function($form) {
      if (!$form.data('main-action')) {
        return $form.data('main-action', $form.attr('action'));
      }
    };

    Default.prototype.restoreFormAction = function($form) {
      if ($form.data('main-action')) {
        return $form.attr('action', $form.data('main-action'));
      }
    };

    return Default;

  })(App.AjaxForm.Abstract);

  App.FormErrorizer = {};

  App.FormErrorizer.Default = (function(_super) {
    var getFormName, resolvePath;

    __extends(Default, _super);

    function Default(errorizeClass, messageClass, errorGroupClass) {
      this.errorizeClass = errorizeClass != null ? errorizeClass : 'errorized';
      this.messageClass = messageClass != null ? messageClass : 'error';
      this.errorGroupClass = errorGroupClass != null ? errorGroupClass : 'error-group';
      this.formErrorPosition = 'top';
      this.formErrorFadeOutTime = null;
    }

    Default.prototype.errorize = function($form, response) {
      var formName;
      if (response.failure && response.failure.formErrors) {
        formName = getFormName(response.failure.formErrors);
        if (response.failure.formErrors[formName].errors) {
          this.displayFormErrors($form, response.failure.formErrors[formName].errors);
        }
        if (response.failure.formErrors[formName].childErrors) {
          this._errorizeChildren($form, response.failure.formErrors[formName].childErrors, formName);
        }
        return true;
      } else {
        return false;
      }
    };

    Default.prototype.clear = function($form) {
      return $form.find("." + this.errorizeClass).removeClass("." + this.errorizeClass).filter("." + this.messageClass).remove();
    };

    Default.prototype.displayFormErrors = function($form, messages) {
      var _this = this;
      return $(messages).each(function(i, message) {
        var element;
        element = _this.getErrorElement();
        if (_this.formErrorPosition === 'bottom') {
          $form.append(element.text(message));
        } else {
          $form.prepend(element.text(message));
        }
        if (_this.formErrorFadeOutTime > 0) {
          return element.delay(_this.formErrorFadeOutTime).fadeOut();
        }
      });
    };

    Default.prototype.displayFieldError = function(fieldId, errors) {
      var $field,
        _this = this;
      $field = $('[name^="' + fieldId + '"]').first();
      if ($field.closest("." + this.errorGroupClass).length) {
        $field = $field.closest("." + this.errorGroupClass);
        $field.addClass(this.errorizeClass);
        return $.each(errors, function(i, message) {
          return $field.after(_this.getWrappedError(message));
        });
      } else {
        $field.addClass(this.errorizeClass);
        return $.each(errors, function(i, message) {
          return $field.after(_this.getErrorElement().text(message));
        });
      }
    };

    Default.prototype.getWrappedError = function(message) {
      return this.getErrorElement().text(message);
    };

    Default.prototype.getErrorElement = function() {
      return $('<div/>', {
        'class': "" + this.errorizeClass + " " + this.messageClass
      });
    };

    Default.prototype.setFormErrorPosition = function(formErrorPosition) {
      this.formErrorPosition = formErrorPosition;
    };

    Default.prototype.setFormErrorFadeOutTime = function(formErrorFadeOutTime) {
      this.formErrorFadeOutTime = formErrorFadeOutTime;
    };

    Default.prototype._errorizeChildren = function($form, childErrors, path) {
      var _this = this;
      return $(childErrors).each(function(i, child) {
        return $.each(child, function(inputId, errors) {
          if (errors.errors) {
            if (typeof inputId === 'string') {
              _this.displayFieldError(resolvePath(path, inputId), errors.errors);
            } else {
              _this.displayFormErrors($form, errors.errors);
            }
          }
          if (errors.childErrors) {
            _this._errorizeChildren($form, errors.childErrors, resolvePath(path, inputId));
          }
          if ($.isArray(errors)) {
            return _this.displayFieldError(resolvePath(path, inputId), errors);
          }
        });
      });
    };

    getFormName = function(form) {
      var k, key;
      for (k in form) {
        key = k;
      }
      return key;
    };

    resolvePath = function(path, inputId) {
      return path + '[' + inputId + ']';
    };

    return Default;

  })(App.AbstractErrorizer);

}).call(this);
